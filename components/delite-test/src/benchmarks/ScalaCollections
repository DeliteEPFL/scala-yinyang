  val m = orders flatMap {
      o ⇒ lineitem map ((o, _)) // Cross join of `orders` with `lineitem`
    } filter { p ⇒ // Filter on "where" conditions
      (p._1._1 == p._2._1) && // o_orderkey = l_orderkey
        ((p._2._15 == shipmode1) || // and l_shipmode in ('[SHIPMODE1]', '[SHIPMODE2]')
          (p._2._15 == shipmode2)) &&
          (p._2._12 < p._2._13) && // and l_commitdate  <  l_receiptdate
          (p._2._11 < p._2._12) && // and l_shipdate    <  l_commitdate
          (p._2._13 >= p._2._13) && // and l_receiptdate >= date '[DATE]'
          (p._2._13 < p._2._13 + (1, 0, 0)) // and l_receiptdate <  date '[DATE]' + interval '1' year
    } map { p ⇒ // Select `l_shipmode` and case expressions in sums
      val b = ((p._1._6 == "1-URGENT") || (p._1._6 == "2-HIGH"))
      (p._2._15, if (b) 1 else 0, if (!b) 1 else 0)
    } groupBy ((_._1)) // Group by `l_shipmode`
    (m.keys.toList map { k: Rep[String] ⇒
      m(k).foldLeft((k, unit(0), unit(0))) { (acc, row) ⇒
        (acc._1, acc._2 + row._2, acc._3 + row._3)
      }
    }) sortBy ((_._1)) // Sort by `l_shipmode`
m.keys.toList map {
      k ⇒
        (k, m(k).length, m(k).foldLeft((unit(0.0), unit(0.0), unit(0.0), unit(0.0), unit(0.0)))((acc, te) ⇒
          (acc._1 + te._3, acc._2 + te._4, acc._3 + te._4 * (unit(1.0) - te._5), acc._4 + te._6, acc._5 + te._4 * (unit(1.0) - te._4) * (unit(1.0) + te._6))))
    } map { p ⇒ (p._1._1, p._1._2, p._3._1, p._3._2, p._3._3, p._3._5, p._3._1 / p._2, p._3._2 / p._2, p._3._4 / p._2)
    } sortBy (e ⇒ (e._1, e._2))
 val inputFolder = getArgs(0)
    val outputFolder = getArgs(1)
    val date = getArgs(2).toDate
    val shipModes = getArgs(3)
    val lineitems = DList(getArgs(0) + "/lineitem/")
      .map(x => LineItem.parse(x, "\\|"))
    val orders = DList(getArgs(0) + "/orders/")
      .map(x => Order.parse(x, "\\|"))
    val filteredLineitems = lineitems
      .filter(x => x.l_shipmode.matches(shipModes))
      .filter(x => date <= x.l_receiptdate)
      .filter(x => x.l_shipdate < x.l_commitdate)
      .filter(x => x.l_commitdate < x.l_receiptdate)
      .filter(x => x.l_receiptdate < date + (1, 0, 0))
    val orderTuples = orders.map(x => (x.o_orderkey, x))
    val lineItemTuples = filteredLineitems.map(x => (x.l_orderkey, x))
    val joined = lineItemTuples.join(orderTuples, getArgs(4).toInt)
    val joinedTupled = joined.map {
      x =>
        val prio = x._2._2.o_orderpriority;
        val isHigh = prio.matches("1-URGENT") || prio.matches("2-HIGH")
        //val isHigh = prio.startsWith("1") || prio.startsWith("2");
        val count = if (isHigh) 1 else 0
        val part2: Rep[(Int, Int)] = (count, 1 - count)
        (x._2._1.l_shipmode, part2)
    }
    val reduced = joinedTupled.groupByKey(1).reduce((x, y) => (x._1 + y._1, x._2 + y._2))
    reduced.map {
      x =>
        "shipmode " + x._1 + ": high " + x._2._1 + ", low " + x._2._2
    }.save(getArgs(1))
    unit(())
      val limit = getArgs(1).toInt
      val date = getArgs(2).toDate
      val lineitems = DList(getArgs(0) + "/lineitem.tbl")
        .map(x => LineItem.parse(x, "\\|"))
      val orders = DList(getArgs(0) + "/orders.tbl")
        .map(x => Order.parse(x, "\\|"))
      val filteredOrders = orders
        .filter(x => x.o_custkey < limit)
        .filter(x => date < x.o_orderdate)
      val lineItemTuples = lineitems.map(x => (x.l_orderkey, x))
      val orderTuples = filteredOrders.map(x => (x.o_orderkey, x))
      val joined = lineItemTuples.join(orderTuples)
      val tupled = joined.map { x => val y: Rep[(Int, Int)] = (x._2._1.l_orderkey, x._2._2.o_shippriority); (y, x._2._1.l_extendedprice) }
      val grouped = tupled.groupByKey
      grouped.reduce((x, y) => x + y)
        .save(getArgs(3))
      unit(())
       .map(_.plaintext)
      .flatMap(_.replaceAll("""((\\n(thumb)*)|(\.(thumb)+))""", " ").split("[^a-zA-Z0-9']+").toSeq)
      .map(x => if (x.matches("(thumb)+[A-Z].*?")) x.replaceAll("(thumb)+", "") else x)
      .filter(x => x.length > 1)
      .filter(x => !stopWordsSet.contains(x))
      .filter(x => !x.matches("(left|right)(thumb)+"))
      .map(x => (x, unit(1)))
      .groupByKey
      .reduce(_ + _)
      .save(getArgs(1))
    unit(())
    parsed.map(x => "\\n" + x.plaintext)
      .map(_.replaceAll("""\[\[.*?\]\]""", " "))
      .flatMap(_.replaceAll("""\\[nNt]""", " ").split("[^a-zA-Z0-9']+").toSeq)
      .filter(x => x.length > 1)
      .map(x => if (x.matches("^((left|right)*(thumb)(nail|left|right)*)+[0-9A-Z].*?")) x.replaceAll("((left|right)*thumb(nail|left|right)*)+", "") else x)
      .map(x => (x, unit(1)))
      .groupByKey
      .reduce(_ + _)
      .save(getArgs(1))
    unit(())
    val charCode: Rep[HashMap[Char, Char]] =
      for (p ← mnemonics; ltr ← p._2) yield (ltr -> p._1)
    def wordCode(word: Rep[LString]) = word map (charCode(_))
    val wordsForNum: Rep[HashMap[LString, List[LString]]] =
      (words groupBy wordCode)
    def encode: Rep[LString ⇒ List[List[LString]]] = doLambda { number ⇒
      if (number.isEmpty)
        List(List())
      else {
        for {
          splitPoint ← (unit(1) until (number.length + 1)).toList
          word ← wordsForNum getOrElse ((number take splitPoint), List())
          rest ← encode(number drop splitPoint)
        } yield word :: rest
      }
    }
    encode(number)